//! Hebi code generator.
//!
//! [`emit`] is the entrypoint.
//!
//! Hebi is a dynamically-typed, interpreted language. Its virtual machine
//! executes fixed-width register-based bytecode. This module generates
//! that bytecode.
//!
//! Note the use of `unsafe` for constructing operands: the VM trusts that
//! the output of the code generator is _correct_, and that is the point
//! from which that trust originates.
//!
//! ## Instruction set
//!
//! The bytecode is fixed-width, meaning each instruction is exactly 4 bytes.
//! Most instructions use most of that space, but being maximally space-efficient
//! is not a goal of Hebi's instruction set.
//!
//! The instruction set in question is generated by `/asmgen` from `/src/codegen/opcodes.s`.
//!
//! ## Register allocation
//!
//! Register allocation is very simple: Whenever a register is needed,
//! allocate one by incrementing a number, then free it by decrementing
//! as soon the register is no longer required.
//! Registers can be long-lived if used by variables, or short-lived if
//! used by sub-expressions.
//!
//! ## Constant folding
//!
//! The code generator performs basic constant folding, modelled like a
//! partial tree-walking interpreter, centered around the [`Value`] type.
//!
//! Values are either:
//!
//! - A constant value (present in the source code verbatim), or
//! - A runtime-known value, which must be _materialized_ into a register
//!   if it is to be used.
//!
//! We want instructions to be able to use registers directly as much as possible,
//! to avoid allocating too many registers.
//!
//! - `eval` methods return `Value`s, and may emit some bytecode.
//! - `emit` methods only emit bytecode.
//!
//! If an `eval` returns a runtime-known value, then it expects the caller to use
//! the provided register when emitting its bytecode. For example, evaluating:
//!
//! ```text,ignore
//! var result = 0
//! var a = 1
//! result = a + 2
//! ```
//!
//! The "maximalist" version of the bytecode required to evaluate
//! that snippet of code would look something like:
//!
//! ```text,ignore
//! lint r1, l0  ; l0=0
//! lint r2, l1  ; l1=1
//! mov r4, r2
//! lint r5, l2  ; l2=2
//! add r3, r4, r5
//! mov r3, r1
//! lnil r0
//! ret
//! ```
//!
//! That's not great. We're using:
//! - 8 instructions
//! - 3 literal pool entries, and
//! - 6 registers!
//!
//! What the compiler actually emits today:
//!
//! ```text,ignore
//! lsmi r1, 0
//! lsmi r2, 1
//! add r1, r2, 2
//! lnil r0
//! ret
//! ```
//!
//! - The variables are initialized to *sm*all *i*nteger (`smi`) values
//!   of `0` and `1` embedded directly as an operand in `lsmi`
//! - A single `add` is emitted, which:
//!   - Writes directly to `result`'s register
//!   - Uses `a`'s register as the lhs
//!   - Uses a literal pool entry as the rhs
//!
//! The tally is:
//! - 5 instructions,
//! - 1 literal pool entry,
//! - 3 registers
//!
//! We can't easily get rid of `r0`, it's there to guarantee all functions
//! return _something_.
//!
//! ## Modules
//!
//! The result of code generation is a [`Module`], which is:
//! - A list of functions, each with a unique stable ID ([`FnId`]), and
//! - The ID of the main function.
//!
//! The VM begins execution by dispatching the module's main entrypoint.
//!

#[macro_use]
pub mod opcodes;

use beef::lean::Cow;
use bumpalo::{Bump, collections::Vec, vec};
use hashbrown::HashMap;
use opcodes::{FnId, Imm8, Imm16, Imm16s, Imm24s, Insn, Lit, Lit8, Opcode, Reg, asm, i24};

use crate::{
    ast::{self, Ast, Ident, Node, NodeList, Stmt, f64n},
    error::{Result, error},
    module::{FuncDebugInfo, FuncInfo, Literal, Local, Module},
    span::Span,
    vm::{Control, VmState, value::ValueRaw},
};

// TODO: basic optimizations (configurable)
// - peephole
// - jump chaining
//    - jump-to-jump should forward the address
// - dead code elimination
//   - mark bb exit (break, return, continue, if),
//     any emitted code is discarded until the exit label is bound

macro_rules! f {
    (&$m:expr) => {
        unsafe {
            debug_assert!(!($m).func_stack.is_empty());
            ($m).func_stack.last().unwrap_unchecked()
        }
    };

    ($m:expr) => {
        unsafe {
            debug_assert!(!($m).func_stack.is_empty());
            ($m).func_stack.last_mut().unwrap_unchecked()
        }
    };
}

const NO_SPAN: Span = Span::empty();

pub fn emit(name: Cow<'static, str>, ast: &Ast) -> Result<Module> {
    let buf = &Bump::new();
    let mut m = State {
        buf,
        func_stack: vec![in buf],
        func_table: FunctionTable::new(buf),
    };

    // note: `main` cannot be called, so does not need a symbol
    let main = m
        .func_table
        .reserve("@main", Span::empty())
        .expect("should not fail to reserve main");
    assert!(main.get() == 0);

    let f = emit_func(
        &mut m,
        main,
        "@main".into(),
        Span::empty(),
        NodeList::empty(ast),
        &[],
        ast.root().body(),
    )?;

    m.func_table.define(main, f);

    Ok(Module::new(name, main, m.func_table.finish()))
}

struct State<'a> {
    buf: &'a Bump,
    func_stack: Vec<'a, FunctionState<'a>>,
    func_table: FunctionTable<'a>,
}

struct FunctionTable<'a> {
    entries: Vec<'a, FunctionTableEntry<'a>>,
}

enum FunctionTableEntry<'a> {
    Occupied(FuncInfo),
    Reserved(Cow<'a, str>, Span),
}

impl<'a> FunctionTable<'a> {
    fn new(buf: &'a Bump) -> Self {
        Self {
            entries: vec![in buf],
        }
    }

    fn reserve(&mut self, name: impl Into<Cow<'a, str>>, span: Span) -> Result<FnId> {
        let id = self.entries.len();
        if id >= u16::MAX as usize {
            return error(format!("too many functions, maximum is {}", u16::MAX), span).into();
        }
        let id = id as u16;

        self.entries
            .push(FunctionTableEntry::Reserved(name.into(), span));
        Ok(unsafe { FnId::new_unchecked(id) })
    }

    fn define(&mut self, id: FnId, info: FuncInfo) {
        use FunctionTableEntry as E;

        match self.entries.get_mut(id.zx()) {
            Some(E::Occupied(..)) => panic!("ICE: function defined twice"),
            Some(E::Reserved(name, span)) => {
                assert!(
                    info.name() == name,
                    "ICE: function definition mismatch: expected {name:?} for fn id {id}, got {:?}\n\
                    NOTE: function was declared at {span}",
                    info.name()
                );
            }
            None => {
                panic!("ICE: function finished before declaration");
            }
        }

        self.entries[id.zx()] = E::Occupied(info);
    }

    fn finish(self) -> Vec<'a, FuncInfo> {
        let mut out = Vec::with_capacity_in(self.entries.len(), self.entries.bump());
        for entry in self.entries {
            use FunctionTableEntry as E;
            match entry {
                E::Occupied(func_info) => out.push(func_info),
                E::Reserved(name, span) => {
                    panic!("ICE: function declared but not defined: {name:?} at {span}");
                }
            }
        }
        out
    }
}

struct FunctionState<'a> {
    name: Cow<'a, str>,
    scopes: Vec<'a, Scope<'a>>,
    ra: RegAlloc,
    code: Vec<'a, Insn>,
    literals: Literals<'a>,
    loop_: Option<Loop<'a>>,

    dbg: FunctionDebug<'a>,
}

struct Scope<'a> {
    regalloc_snapshot: RegAllocSnapshot,
    symbols: Vec<'a, Symbol<'a>>,
    undefined_functions: Vec<'a, FnId>,
}

impl<'a> Scope<'a> {
    fn push(&mut self, symbol: Symbol<'a>) {
        self.symbols.push(symbol)
    }
}

struct FunctionDebug<'a> {
    spans: Vec<'a, Span>,
    locals: Vec<'a, Local>,
}

struct RegAlloc {
    nvars: u8,
    next: u8,
    num: u8,
}

impl RegAlloc {
    fn new() -> Self {
        Self {
            nvars: 0,
            next: 0,
            num: 0,
        }
    }

    fn alloc(&mut self, span: Span) -> Result<Reg> {
        if self.next == u8::MAX {
            return error("too many registers", span).into();
        }

        let r = unsafe { Reg::new_unchecked(self.next) };

        self.next += 1;
        if self.next > self.num {
            self.num = self.next;
        }

        Ok(r)
    }

    fn alloc_var(&mut self, span: Span) -> Result<Reg> {
        let r = self.alloc(span)?;
        self.nvars += 1;
        Ok(r)
    }

    fn alloc_n(&mut self, span: Span, n: u8) -> Result<RegRange> {
        if n == 0 {
            return Ok(RegRange::empty());
        }

        if self.next as usize + n as usize >= u8::MAX as usize {
            return error("too many registers", span).into();
        }

        let start = unsafe { Reg::new_unchecked(self.next) };

        self.next += n;
        if self.next > self.num {
            self.num = self.next;
        }

        Ok(RegRange { start, n })
    }

    fn is_at_top(&self, r: Reg) -> bool {
        self.next == r.get() + 1
    }

    fn free(&mut self, r: Reg) {
        // Do not free variables. They are freed by `end_scope`,
        // which snapshots the current scope depth.
        if r.get() < self.nvars {
            return;
        }

        if self.next != r.get() + 1 {
            unreachable!("ICE: registers freed out of order");
        }
        self.next = r.get();
    }

    fn free_n(&mut self, range: RegRange) {
        // ignore empty ranges
        if range.n == 0 {
            return;
        }

        // note: we never allocate use `alloc_n` for variables
        assert!(
            range.start.get() >= self.nvars,
            "ICE: alloc_n range intersects with variables"
        );

        if self.next != range.end().get() + 1 {
            unreachable!(
                "ICE: registers freed out of order ({} != {})",
                self.next,
                range.end().get() + 1,
            );
        }
        self.next = range.start.get();
    }

    fn snapshot(&self) -> RegAllocSnapshot {
        RegAllocSnapshot {
            nvars: self.nvars,
            next: self.next,
        }
    }

    fn restore(&mut self, snapshot: RegAllocSnapshot) {
        self.nvars = snapshot.nvars;
        self.next = snapshot.next;
    }
}

struct RegAllocSnapshot {
    nvars: u8,
    next: u8,
}

#[derive(Debug, Clone, Copy)]
struct RegRange {
    start: Reg,
    n: u8,
}

impl RegRange {
    fn empty() -> Self {
        Self { start: R0, n: 0 }
    }

    fn end(&self) -> Reg {
        if self.n == 0 {
            return R0;
        }

        unsafe { Reg::new_unchecked(self.start.get() + self.n - 1) }
    }
}

struct RegRangeIter {
    start: u8,
    end: u8,
    n: u8,
}

impl IntoIterator for RegRange {
    type Item = Reg;

    type IntoIter = RegRangeIter;

    fn into_iter(self) -> Self::IntoIter {
        RegRangeIter {
            start: self.start.get(),
            end: self.start.get() + self.n,
            n: self.n,
        }
    }
}

impl Iterator for RegRangeIter {
    type Item = Reg;

    fn next(&mut self) -> Option<Self::Item> {
        if self.n == 0 {
            return None;
        }

        let n = self.n;
        self.n -= 1;

        Some(unsafe { Reg::new_unchecked(self.end - n) })
    }
}

/// Returns true if `reg` is at the top of the stack,
/// meaning the next allocated register would be `reg + 1`.
fn is_at_top<'a>(m: &mut State<'a>, reg: Reg) -> bool {
    f!(m).ra.is_at_top(reg)
}

/// Attempt to reuse `reg` if present, otherwise allocate a fresh register.
#[cfg_attr(debug_assertions, track_caller)]
fn maybe_reuse_reg<'a>(m: &mut State<'a>, span: Span, reg: Option<Reg>) -> Result<Reg> {
    let r = match reg {
        Some(reg) => Ok(reg),
        None => fresh_reg(m, span),
    };

    #[cfg(debug_assertions)]
    if std::env::var("PRINT_REGALLOC").ok().is_some() {
        eprintln!(
            "reuse {span} {}: {reg:?} -> {r:?}",
            std::panic::Location::caller()
        );
    }

    r
}

#[cfg_attr(debug_assertions, track_caller)]
/// Allocate a register.
fn fresh_reg<'a>(m: &mut State<'a>, span: Span) -> Result<Reg> {
    let r = f!(m).ra.alloc(span);

    #[cfg(debug_assertions)]
    if std::env::var("PRINT_REGALLOC").ok().is_some() {
        eprintln!("alloc {span} {}: {r:?}", std::panic::Location::caller());
    }

    r
}

/// Allocate a contiguous range of registers.
#[cfg_attr(debug_assertions, track_caller)]
fn fresh_reg_range<'a>(m: &mut State<'a>, span: Span, n: u8) -> Result<RegRange> {
    let range = f!(m).ra.alloc_n(span, n);

    #[cfg(debug_assertions)]
    if std::env::var("PRINT_REGALLOC").ok().is_some() {
        eprintln!(
            "alloc range {span} {}: {range:?}",
            std::panic::Location::caller()
        );
    }

    range
}

/// Allocate a register, and mark it as in use by a variable.
///
/// When in use by a variable, a register won't be freed by `free_reg` and others,
/// instead being freed automatically at the end of the current scope.
#[cfg_attr(debug_assertions, track_caller)]
fn fresh_var<'a>(m: &mut State<'a>, span: Span) -> Result<Reg> {
    let r = f!(m).ra.alloc_var(span);

    #[cfg(debug_assertions)]
    if std::env::var("PRINT_REGALLOC").ok().is_some() {
        eprintln!("alloc var {span} {}: {r:?}", std::panic::Location::caller());
    }

    r
}

/// Free a register.
#[cfg_attr(debug_assertions, track_caller)]
fn free_reg<'a>(m: &mut State<'a>, reg: Reg) {
    #[cfg(debug_assertions)]
    if std::env::var("PRINT_REGALLOC").ok().is_some() {
        eprintln!("free reg {}: {reg:?}", std::panic::Location::caller());
    }

    f!(m).ra.free(reg);
}

/// Free a register range.
#[cfg_attr(debug_assertions, track_caller)]
fn free_reg_range<'a>(m: &mut State<'a>, range: RegRange) {
    #[cfg(debug_assertions)]
    if std::env::var("PRINT_REGALLOC").ok().is_some() {
        eprintln!("free range {}: {range:?}", std::panic::Location::caller());
    }

    f!(m).ra.free_n(range);
}

/// If `value` is dynamic, free its register.
#[cfg_attr(debug_assertions, track_caller)]
fn free_value<'a>(m: &mut State<'a>, value: Value<'a>) {
    #[cfg(debug_assertions)]
    if std::env::var("PRINT_REGALLOC").ok().is_some() {
        eprintln!(
            "free value {} {}: {:?}",
            value.span,
            std::panic::Location::caller(),
            value.kind,
        );
    }

    if let ValueKind::Dynamic(reg) = value.kind {
        f!(m).ra.free(reg);
    }
}

/// If `operand` is a register, free it.
#[cfg_attr(debug_assertions, track_caller)]
fn free_operand<'a>(m: &mut State<'a>, operand: Operand) {
    #[cfg(debug_assertions)]
    if std::env::var("PRINT_REGALLOC").ok().is_some() {
        eprintln!(
            "free operand {}: {operand:?}",
            std::panic::Location::caller(),
        );
    }

    if let Operand::Reg(reg) = operand {
        f!(m).ra.free(reg);
    }
}

struct Literals<'a> {
    flat: Vec<'a, Literal>,
    ints: HashMap<i64, Lit, rustc_hash::FxBuildHasher, &'a Bump>,
    floats: HashMap<f64n, Lit, rustc_hash::FxBuildHasher, &'a Bump>,
    strings: HashMap<&'a str, Lit, rustc_hash::FxBuildHasher, &'a Bump>,
}

impl<'a> Literals<'a> {
    fn new(buf: &'a Bump) -> Self {
        Self {
            flat: vec![in buf],
            ints: HashMap::with_capacity_and_hasher_in(
                16,
                rustc_hash::FxBuildHasher::default(),
                buf,
            ),
            floats: HashMap::with_capacity_and_hasher_in(
                16,
                rustc_hash::FxBuildHasher::default(),
                buf,
            ),
            strings: HashMap::with_capacity_and_hasher_in(
                16,
                rustc_hash::FxBuildHasher::default(),
                buf,
            ),
        }
    }

    fn is_next_id_8bit(&self) -> bool {
        let id = self.flat.len();
        id <= u8::MAX as usize
    }

    fn next_id(flat: &mut Vec<'a, Literal>, span: Span) -> Result<Lit> {
        let id = flat.len();
        if id > u16::MAX as usize {
            return error("too many literals", span).into();
        }
        Ok(unsafe { Lit::new_unchecked(id as u16) })
    }

    fn i64(&mut self, v: i64, span: Span) -> Result<Lit> {
        match self.ints.entry(v) {
            hashbrown::hash_map::Entry::Occupied(entry) => Ok(*entry.get()),
            hashbrown::hash_map::Entry::Vacant(entry) => {
                let id = Self::next_id(&mut self.flat, span)?;
                self.flat.push(Literal::Int(v));
                entry.insert(id);

                Ok(id)
            }
        }
    }

    fn f64(&mut self, v: f64n, span: Span) -> Result<Lit> {
        match self.floats.entry(v) {
            hashbrown::hash_map::Entry::Occupied(entry) => Ok(*entry.get()),
            hashbrown::hash_map::Entry::Vacant(entry) => {
                let id = Self::next_id(&mut self.flat, span)?;
                self.flat.push(Literal::Float(v.get()));
                entry.insert(id);

                Ok(id)
            }
        }
    }

    fn str(&mut self, v: &str, span: Span) -> Result<Lit> {
        let s = self.strings.allocator().alloc_str(v);
        match self.strings.entry(s) {
            hashbrown::hash_map::Entry::Occupied(entry) => Ok(*entry.get()),
            hashbrown::hash_map::Entry::Vacant(entry) => {
                let id = Self::next_id(&mut self.flat, span)?;
                self.flat.push(Literal::String(v.into()));
                entry.insert(id);

                Ok(id)
            }
        }
    }
}

struct Loop<'a> {
    /// Points to first instruction in the loop body.
    entry: BackwardLabel,

    /// Points to after the last instruction in the loop body.
    exit: ForwardLabel<'a>,
}

struct ForwardLabel<'a> {
    /// Position of targets to patch
    patch_targets: Vec<'a, usize>,
}

impl<'a> ForwardLabel<'a> {
    fn new(buf: &'a Bump) -> Self {
        Self {
            patch_targets: vec![in buf],
        }
    }

    fn add_target(&mut self, pos: usize) {
        self.patch_targets.push(pos);
    }

    fn bind(self, f: &mut FunctionState<'a>) -> Result<()> {
        let pos = f.code.len();
        let span = *f.dbg.spans.last().unwrap();
        for target in self.patch_targets {
            let offset = i24::try_from((pos - target) as isize)
                .map_err(|_| error("jump offset out of bounds for i24", span))?;

            let span = f.dbg.spans[target];
            let insn = &mut f.code[target];
            let Opcode::Jmp = insn.op() else {
                return error("invalid label referree", span).into();
            };
            *insn = asm::jmp(unsafe { Imm24s::new_unchecked(offset) });
        }

        Ok(())
    }
}

struct BasicForwardLabel {
    patch_target: Option<usize>,
}

impl BasicForwardLabel {
    fn new() -> Self {
        Self { patch_target: None }
    }

    fn set_target(&mut self, pos: usize) {
        self.patch_target = Some(pos);
    }

    fn bind(self, f: &mut FunctionState<'_>) -> Result<()> {
        let pos = f.code.len();
        let span = *f.dbg.spans.last().unwrap();
        let Some(target) = self.patch_target else {
            unreachable!("ICE: basic forward label bound without patch target");
        };

        let offset = i24::try_from((pos - target) as isize)
            .map_err(|_| error("jump offset out of bounds for i24", span))?;

        let span = f.dbg.spans[target];
        let insn = &mut f.code[target];
        let Opcode::Jmp = insn.op() else {
            return error("invalid label referree", span).into();
        };
        *insn = asm::jmp(unsafe { Imm24s::new_unchecked(offset) });

        Ok(())
    }
}

struct BackwardLabel {
    /// Instruction position
    pos: usize,
}

impl BackwardLabel {
    fn bind(f: &mut FunctionState<'_>) -> Self {
        Self { pos: f.code.len() }
    }

    fn offset(&self, jmp_pos: usize, span: Span) -> Result<Imm24s> {
        let offset = i24::try_from((self.pos as isize) - (jmp_pos as isize))
            .map_err(|_| error("jump offset exceeds u24::MAX", span))?;
        Ok(unsafe { Imm24s::new_unchecked(offset) })
    }
}

impl<'a> FunctionState<'a> {
    fn new(name: Cow<'a, str>, buf: &'a Bump) -> Self {
        Self {
            name,
            scopes: vec![in buf],
            ra: RegAlloc::new(),
            code: vec![in buf],
            literals: Literals::new(buf),
            loop_: None,

            dbg: FunctionDebug {
                spans: vec![in buf],
                locals: vec![in buf],
            },
        }
    }

    fn begin_scope(&mut self, buf: &'a Bump) {
        self.scopes.push(Scope {
            regalloc_snapshot: self.ra.snapshot(),
            symbols: vec![in buf],
            undefined_functions: vec![in buf],
        });
    }

    fn end_scope(&mut self) {
        let scope = self
            .scopes
            .pop()
            .expect("`end_scope` called without any scopes");
        self.ra.restore(scope.regalloc_snapshot);
    }

    fn begin_loop(&mut self, buf: &'a Bump) -> Option<Loop<'a>> {
        let entry = BackwardLabel::bind(self);
        let exit = ForwardLabel::new(buf);
        self.loop_.replace(Loop { entry, exit })
    }

    fn end_loop(&mut self, prev: Option<Loop<'a>>) -> Result<()> {
        let loop_ = std::mem::replace(&mut self.loop_, prev).expect("some loop");

        loop_.exit.bind(self)
    }

    fn declare_local(&mut self, name: &'a str, reg: Reg, span: Span) {
        let scope = self
            .scopes
            .last_mut()
            .expect("must always have at least one scope");
        scope.push(Symbol::Local {
            name: name.into(),
            span,
            reg,
        });
        self.dbg.locals.push(Local { span, reg });
    }

    fn declare_function(&mut self, name: impl Into<Cow<'a, str>>, arity: u8, span: Span, id: FnId) {
        let scope = self
            .scopes
            .last_mut()
            .expect("must always have at least one scope");
        scope.push(Symbol::Function {
            name: name.into(),
            arity,
            span,
            id,
        });
    }

    fn resolve(&self, name: &str) -> Option<&Symbol<'a>> {
        for scope in self.scopes.iter().rev() {
            for symbol in scope.symbols.iter().rev() {
                if symbol.name() == name {
                    return Some(symbol);
                }
            }
        }

        None
    }

    fn resolve_in_scope(&self, name: &str) -> Option<&Symbol<'a>> {
        for symbol in self.scopes.last()?.symbols.iter().rev() {
            if symbol.name() == name {
                return Some(symbol);
            }
        }

        None
    }

    fn emit(&mut self, insn: Insn, span: Span) {
        self.code.push(insn);
        self.dbg.spans.push(span);
        // TODO(opt): peep-opt
    }
}

impl<'a> State<'a> {
    fn begin_scope(&mut self) {
        f!(self).begin_scope(self.buf);
    }

    fn end_scope(&mut self) {
        f!(self).end_scope()
    }

    fn begin_loop(&mut self) -> Option<Loop<'a>> {
        f!(self).begin_loop(self.buf)
    }

    fn end_loop(&mut self, prev: Option<Loop<'a>>) -> Result<()> {
        f!(self).end_loop(prev)
    }

    fn declare_local(&mut self, name: &'a str, reg: Reg, span: Span) {
        f!(self).declare_local(name, reg, span)
    }

    fn resolve(&self, name: &str) -> Option<&Symbol<'a>> {
        for f in self.func_stack.iter().rev() {
            if let Some(symbol) = f.resolve(name) {
                return Some(symbol);
            }
        }

        None
    }

    fn resolve_in_scope(&self, name: &str) -> Option<&Symbol<'a>> {
        if let Some(symbol) = f!(&self).resolve_in_scope(name) {
            return Some(symbol);
        }

        None
    }

    fn emit(&mut self, insn: Insn, span: Span) {
        f!(self).emit(insn, span)
    }

    /// Declare a function which has not yet been emitted
    ///
    /// This assign it an ID and declares a symbol with its name
    fn declare_function(
        &mut self,
        name: impl Into<Cow<'a, str>>,
        arity: u8,
        span: Span,
    ) -> Result<FnId> {
        let name = name.into();
        let id = self.func_table.reserve(name.clone(), span)?;
        f!(self).declare_function(name, arity, span, id);
        Ok(id)
    }

    /// Define an function once that it's been emitted
    fn define_function(&mut self, id: FnId, f: FuncInfo) {
        self.func_table.define(id, f);
    }
}

#[repr(align(16))]
enum Symbol<'a> {
    Local {
        name: Cow<'a, str>,
        span: Span,
        reg: Reg,
    },
    Function {
        name: Cow<'a, str>,
        arity: u8,
        span: Span,
        id: FnId,
    },
}

impl<'a> Symbol<'a> {
    fn name(&self) -> &str {
        match self {
            Symbol::Local { name, .. } => name.as_ref(),
            Symbol::Function { name, .. } => name.as_ref(),
        }
    }
}

fn emit_func<'a>(
    m: &mut State<'a>,
    id: FnId,
    name: Cow<'a, str>,
    span: Span,
    params: NodeList<'a, Ident>,
    param_spans: &'a [Span],
    body: NodeList<'a, Stmt>,
) -> Result<FuncInfo> {
    if params.len() > 100 {
        return error(
            "too many parameters, maximum is 100",
            *param_spans.last().unwrap(),
        )
        .into();
    }

    let f = FunctionState::new(name, m.buf);
    m.func_stack.push(f);

    {
        m.begin_scope();
        // NOTE: don't free `ret_reg` as locals are placed above it,
        //       will be freed in `end_scope`.
        let r0 = fresh_var(m, span)?;
        for (param, &span) in params.iter().zip(param_spans.iter()) {
            let dst = fresh_var(m, span)?;
            m.declare_local(param.get(), dst, span);
        }

        let ret_val = eval_block(m, body, Some(r0))?;
        value_force_reg(m, ret_val, r0)?;

        m.emit(asm::ret(), NO_SPAN);
        m.end_scope();
    }
    let f = m.func_stack.pop().expect("function stack is empty");

    Ok(FuncInfo::new(
        f.name.into_owned(),
        params.len() as u8,
        f.ra.num,
        f.code.into_iter().collect(),
        f.literals.flat.into_iter().collect(),
        FuncDebugInfo {
            spans: f.dbg.spans.into_iter().collect(),
            locals: f.dbg.locals.into_iter().collect(),
        },
    ))
}

/// A compile-time value.
///
/// The code generator uses these to perform limited constant evaluation.
///
/// These values are either directly embedded into various instructions,
/// (e.g. `addvn` embeds a literal number in `n`), or materialized by
/// emitting a load instruction.
///
/// If the value is a constant, then no code to produce it at runtime
/// has been emitted yet.
#[derive(Clone, Copy)]
struct Value<'a> {
    kind: ValueKind<'a>,
    span: Span,
}

#[derive(Debug, Clone, Copy)]
enum ValueKind<'a> {
    /// `nil`
    Nil,

    /// `true` or `false`
    Bool(bool),

    /// Signed 64-bit integer
    Int(i64),

    /// 64-bit floating-point number
    ///
    /// Cannot be `NaN`.
    Float(f64n),

    /// Constant string
    Str(&'a str),

    /// Value which can only be known at runtime,
    /// which will be stored in the given register.
    Dynamic(Reg),
}

impl<'a> Value<'a> {
    fn type_name(self) -> &'static str {
        match self.kind {
            ValueKind::Nil => "nil",
            ValueKind::Bool(_) => "bool",
            ValueKind::Int(_) => "int",
            ValueKind::Float(_) => "float",
            ValueKind::Str(_) => "str",
            ValueKind::Dynamic(_) => "unknown",
        }
    }

    fn is_const(self) -> bool {
        match self.kind {
            ValueKind::Nil
            | ValueKind::Bool(_)
            | ValueKind::Int(_)
            | ValueKind::Float(_)
            | ValueKind::Str(_) => true,
            ValueKind::Dynamic(_) => false,
        }
    }

    #[inline]
    fn nil(span: Span) -> Self {
        Self {
            kind: ValueKind::Nil,
            span,
        }
    }

    #[inline]
    fn bool(v: bool, span: Span) -> Self {
        Self {
            kind: ValueKind::Bool(v),
            span,
        }
    }

    #[inline]
    fn int(v: i64, span: Span) -> Self {
        Self {
            kind: ValueKind::Int(v),
            span,
        }
    }

    #[inline]
    fn float(v: f64n, span: Span) -> Self {
        Self {
            kind: ValueKind::Float(v),
            span,
        }
    }

    #[inline]
    fn str(v: &'a str, span: Span) -> Self {
        Self {
            kind: ValueKind::Str(v),
            span,
        }
    }

    #[inline]
    fn dynamic(reg: Reg, span: Span) -> Self {
        Self {
            kind: ValueKind::Dynamic(reg),
            span,
        }
    }
}

enum Place {
    Register(Reg),
    Literals(Lit8),
}

const R0: Reg = unsafe { Reg::new_unchecked(0) };

fn eval_block<'a>(
    m: &mut State<'a>,
    list: NodeList<'a, Stmt>,
    dst: Option<Reg>,
) -> Result<Value<'a>> {
    let (stmt_list, tail) = match list.last().map(|node| node.kind()) {
        Some(ast::StmtKind::StmtExpr(tail)) => (list.slice(0..list.len() - 1).unwrap(), Some(tail)),
        _ => (list, None),
    };

    emit_stmt_list(m, stmt_list)?;

    match tail {
        None => Ok(Value::nil(Span::empty())),
        Some(tail) => eval_expr_maybe_reuse(m, tail.inner(), tail.inner_span(), dst),
    }
}

fn emit_stmt_list<'a>(m: &mut State<'a>, list: NodeList<'a, Stmt>) -> Result<()> {
    // 1. declare all functions in the stmt list
    let mut undefined_functions = vec![in m.buf];
    for stmt in list {
        if let ast::StmtKind::FuncDecl(node) = stmt.kind() {
            let id = m.declare_function(
                node.name().get(),
                node.params().len() as u8,
                node.name_span(),
            )?;
            undefined_functions.push(id);
        }
    }

    // undefined functions needs to be in reverse order of declaration
    undefined_functions.reverse();

    f!(m)
        .scopes
        .last_mut()
        .expect("some scope")
        .undefined_functions = undefined_functions;

    // 2. then process the stmt list
    // as the stmt list is traversed, we come across `FuncDecl` again,
    // at which point we _define_ the given function.
    // to get its id, we `pop` from the `undefined_functions` list,
    // because we are guaranteed to process them in the same order.
    for stmt in list {
        emit_stmt(m, stmt)?;
    }

    Ok(())
}

fn emit_stmt<'a>(m: &mut State<'a>, stmt: Node<'a, Stmt>) -> Result<()> {
    match stmt.kind() {
        ast::StmtKind::Var(node) => emit_stmt_var(m, node)?,
        ast::StmtKind::Loop(node) => emit_stmt_loop(m, node)?,
        ast::StmtKind::FuncDecl(node) => emit_stmt_func(m, node)?,
        ast::StmtKind::StmtExpr(node) => {
            let value = eval_expr(m, node.inner(), node.inner_span())?;
            free_value(m, value);
        }
    }

    Ok(())
}

fn emit_stmt_var<'a>(m: &mut State<'a>, var: Node<'a, ast::Var>) -> Result<()> {
    let (redeclaration, dst) = match m.resolve_in_scope(var.name().get()) {
        Some(Symbol::Local { reg, .. }) => (true, *reg),
        _ => (false, fresh_var(m, var.name_span())?),
    };

    let value = eval_expr_reuse(m, var.value(), var.value_span(), dst)?;
    value_force_reg(m, value, dst)?;

    if !redeclaration {
        m.declare_local(var.name().get(), dst, var.name_span());
    }

    Ok(())
}

fn emit_stmt_loop<'a>(m: &mut State<'a>, loop_: Node<'a, ast::Loop>) -> Result<()> {
    let prev_loop = m.begin_loop();
    m.begin_scope();
    emit_stmt_list(m, loop_.body())?;
    m.end_scope();

    // unconditional jump back to start
    let span = loop_.body_spans().last().copied().unwrap_or_default();
    let pos = f!(&m).code.len();
    let rel = f!(&m)
        .loop_
        .as_ref()
        .expect("some loop")
        .entry
        .offset(pos, span)?;
    m.emit(asm::jmp(rel), span);

    m.end_loop(prev_loop)?;

    Ok(())
}

fn emit_stmt_func<'a>(m: &mut State<'a>, func: Node<'a, ast::FuncDecl>) -> Result<()> {
    let id = f!(m)
        .scopes
        .last_mut()
        .expect("some scope")
        .undefined_functions
        .pop()
        .expect("some function");

    let f = emit_func(
        m,
        id,
        func.name().get().into(),
        func.name_span(),
        func.params(),
        func.params_spans(),
        func.body().body(),
    )?;

    m.define_function(id, f);

    Ok(())
}

fn eval_expr_maybe_reuse<'a>(
    m: &mut State<'a>,
    expr: Node<'a, ast::Expr>,
    span: Span,
    dst: Option<Reg>,
) -> Result<Value<'a>> {
    match expr.kind() {
        ast::ExprKind::Return(node) => eval_expr_return(m, node, span, dst),
        ast::ExprKind::Break(node) => eval_expr_break(m, node, span, dst),
        ast::ExprKind::Continue(node) => eval_expr_continue(m, node, span, dst),
        ast::ExprKind::IfSimple(node) => eval_expr_if(m, If::Simple(node), span, dst),
        ast::ExprKind::IfMulti(node) => eval_expr_if(m, If::Multi(node), span, dst),
        ast::ExprKind::Block(node) => eval_expr_block(m, node, span, dst),
        ast::ExprKind::FuncAnon(node) => todo!(),
        ast::ExprKind::GetVar(node) => eval_expr_get_var(m, node, span, dst),
        ast::ExprKind::SetVar(node) => eval_expr_set_var(m, node, span, dst),
        ast::ExprKind::GetField(node) => eval_expr_get_field(m, node, span, dst),
        ast::ExprKind::SetField(node) => eval_expr_set_field(m, node, span, dst),
        ast::ExprKind::GetIndex(node) => eval_expr_get_index(m, node, span, dst),
        ast::ExprKind::SetIndex(node) => eval_expr_set_index(m, node, span, dst),
        ast::ExprKind::Call(node) => eval_expr_call(m, node, span, dst),
        ast::ExprKind::Infix(node) => eval_expr_infix(m, node, span, dst),
        ast::ExprKind::Prefix(node) => eval_expr_prefix(m, node, span, dst),
        ast::ExprKind::List(node) => eval_expr_list(m, node, span, dst),
        ast::ExprKind::Table(node) => eval_expr_table(m, node, span, dst),
        ast::ExprKind::Int32(node) => Ok(eval_expr_int(m, IntExpr::I32(node), span)),
        ast::ExprKind::Int64(node) => Ok(eval_expr_int(m, IntExpr::I64(node), span)),
        ast::ExprKind::Float32(node) => Ok(eval_expr_float(m, FloatExpr::F32(node), span)),
        ast::ExprKind::Float64(node) => Ok(eval_expr_float(m, FloatExpr::F64(node), span)),
        ast::ExprKind::Bool(node) => Ok(eval_expr_bool(m, node, span)),
        ast::ExprKind::Str(node) => Ok(eval_expr_str(m, node, span)),
        ast::ExprKind::Nil(node) => Ok(eval_expr_nil(m, node, span)),
    }
}

fn eval_expr<'a>(m: &mut State<'a>, expr: Node<'a, ast::Expr>, span: Span) -> Result<Value<'a>> {
    eval_expr_maybe_reuse(m, expr, span, None)
}

fn eval_expr_reuse<'a>(
    m: &mut State<'a>,
    expr: Node<'a, ast::Expr>,
    span: Span,
    dst: Reg,
) -> Result<Value<'a>> {
    eval_expr_maybe_reuse(m, expr, span, Some(dst))
}

fn eval_expr_return<'a>(
    m: &mut State<'a>,
    node: Node<'a, ast::Return>,
    span: Span,
    _dst: Option<Reg>,
) -> Result<Value<'a>> {
    // TODO: `ret src` instruction
    if let Some(value) = node.value().as_option() {
        let value = eval_expr_reuse(m, value, node.value_span(), R0)?;
        value_force_reg(m, value, R0)?;
    } else {
        value_force_reg(m, Value::nil(span), R0)?;
    }

    m.emit(asm::ret(), span);

    Ok(Value::nil(span))
}

const PLACEHOLDER: Imm24s = unsafe { Imm24s::new_unchecked(i24::ZERO) };

fn eval_expr_break<'a>(
    m: &mut State<'a>,
    brk: Node<'a, ast::Break>,
    span: Span,
    dst: Option<Reg>,
) -> Result<Value<'a>> {
    let f = f!(m);
    let Some(mut loop_) = f.loop_.take() else {
        return error("cannot use `break` outside of loop", span).into();
    };

    // break = unconditional jump to loop exit
    let pos = f.code.len();
    f.emit(asm::jmp(PLACEHOLDER), span);
    loop_.exit.add_target(pos);

    f.loop_ = Some(loop_);

    Ok(Value::nil(span))
}

fn eval_expr_continue<'a>(
    m: &mut State<'a>,
    brk: Node<'a, ast::Continue>,
    span: Span,
    dst: Option<Reg>,
) -> Result<Value<'a>> {
    let Some(loop_) = f!(m).loop_.take() else {
        return error("cannot use `continue` outside of loop", span).into();
    };

    // continue = unconditional jump back to loop entry
    let pos = f!(m).code.len();
    let rel = loop_.entry.offset(pos, span)?;

    m.emit(asm::jmp(rel), span);

    f!(m).loop_ = Some(loop_);

    Ok(Value::nil(span))
}

enum If<'a> {
    Simple(Node<'a, ast::IfSimple>),
    Multi(Node<'a, ast::IfMulti>),
}

// TODO: is there any way to tell if the `expr_if` is top-level,
// and its value is unused?
// Right now we emit useless `lnil` for every branch with a body
// which has no tail.
//
// Maybe make statements returning "nothing" yield a `Value::Nothing`,
// which _actually_ evaluates to nothing...?
fn eval_expr_if<'a>(
    m: &mut State<'a>,
    node: If<'a>,
    span: Span,
    dst: Option<Reg>,
) -> Result<Value<'a>> {
    let out = maybe_reuse_reg(m, span, dst)?;

    let mut exit = ForwardLabel::new(m.buf);

    match node {
        // if <cond> do <body> else <tail>
        If::Simple(node) => {
            // TODO(clean): dedup
            let mut targets = BranchTargets {
                next: ForwardLabel::new(m.buf),
                body: ForwardLabel::new(m.buf),
            };

            // if the condition is true, execute `body`. otherwise, `jmp` to `tail`.
            emit_if_cond(m, node.cond(), node.cond_span(), out, &mut targets)?;
            let pos = f!(m).code.len();
            m.emit(asm::jmp(PLACEHOLDER), node.cond_span());
            targets.next.add_target(pos);

            targets.body.bind(f!(m))?;

            m.begin_scope();
            let value = eval_block(m, node.body(), Some(out))?;
            value_force_reg(m, value, out)?;
            m.end_scope();

            // if `tail` exists and we execute `body`, we should skip `tail`.
            if node.tail().is_some() {
                let pos = f!(m).code.len();
                m.emit(asm::jmp(PLACEHOLDER), node.cond_span());
                exit.add_target(pos);
            }

            targets.next.bind(f!(m))?;

            if let Some(tail) = node.tail().as_option() {
                let value = eval_expr_block(m, tail, node.tail_span(), Some(out))?;
                value_force_reg(m, value, out)?;
            }

            if node.tail().is_some() {
                exit.bind(f!(m))?;
            }
        }
        If::Multi(node) => {
            let mut branches = node.branches().iter().peekable();

            while let Some(branch) = branches.next() {
                let mut targets = BranchTargets {
                    next: ForwardLabel::new(m.buf),
                    body: ForwardLabel::new(m.buf),
                };

                // if the condition is true, execute `body`. otherwise, `jmp` to `tail`.
                emit_if_cond(m, branch.cond(), branch.cond_span(), out, &mut targets)?;
                let pos = f!(m).code.len();
                m.emit(asm::jmp(PLACEHOLDER), branch.cond_span());
                targets.next.add_target(pos);

                targets.body.bind(f!(m))?;

                m.begin_scope();
                let value = eval_block(m, branch.body(), Some(out))?;
                value_force_reg(m, value, out)?;
                m.end_scope();

                let has_next = branches.peek().is_some() || node.tail().is_some();
                if has_next {
                    let pos = f!(m).code.len();
                    m.emit(asm::jmp(PLACEHOLDER), branch.cond_span());
                    exit.add_target(pos);
                }

                targets.next.bind(f!(m))?;
            }

            if let Some(tail) = node.tail().as_option() {
                let value = eval_expr_block(m, tail, node.tail_span(), Some(out))?;
                value_force_reg(m, value, out)?;
            }

            exit.bind(f!(m))?;
        }
    }

    Ok(Value::dynamic(out, span))
}

struct BranchTargets<'a> {
    next: ForwardLabel<'a>,
    body: ForwardLabel<'a>,
}

fn emit_if_cond<'a>(
    m: &mut State<'a>,
    node: Node<'a, ast::Expr>,
    span: Span,
    dst: Reg,
    targets: &mut BranchTargets<'a>,
) -> Result<()> {
    emit_if_cond_inner(m, node, span, dst, false, targets)
}

fn emit_if_cond_inner<'a>(
    m: &mut State<'a>,
    node: Node<'a, ast::Expr>,
    span: Span,
    dst: Reg,
    negated: bool,
    targets: &mut BranchTargets<'a>,
) -> Result<()> {
    use ast::InfixOp as Op;
    match node.kind() {
        ast::ExprKind::Infix(node) if node.op().is_logical() => match (*node.op(), negated) {
            (Op::And, false) => {
                emit_if_cond_inner(m, node.lhs(), node.lhs_span(), dst, false, targets)?;
                let pos = f!(m).code.len();
                m.emit(asm::jmp(PLACEHOLDER), node.lhs_span());
                targets.next.add_target(pos);

                emit_if_cond_inner(m, node.rhs(), node.rhs_span(), dst, false, targets)?;
                // `rhs` jmp is emitted by caller

                Ok(())
            }
            (Op::And, true) => {
                // de morgan says: not(lhs and rhs) == not(lhs) or not(rhs)
                // semantics:
                //   if not(lhs) do body()
                //   else if not(rhs) do body()
                //   end
                emit_if_cond_inner(m, node.lhs(), node.lhs_span(), dst, false, targets)?;
                let pos = f!(m).code.len();
                m.emit(asm::jmp(PLACEHOLDER), node.lhs_span());
                targets.body.add_target(pos);

                emit_if_cond_inner(m, node.rhs(), node.rhs_span(), dst, true, targets)?;
                // `rhs` jmp is emitted by caller

                Ok(())
            }

            (Op::Or, false) => {
                // semantics:
                //   if lhs do body()
                //   else if rhs do body()
                //   end
                emit_if_cond_inner(m, node.lhs(), node.lhs_span(), dst, true, targets)?;
                let pos = f!(m).code.len();
                m.emit(asm::jmp(PLACEHOLDER), node.lhs_span());
                targets.body.add_target(pos);

                emit_if_cond_inner(m, node.rhs(), node.rhs_span(), dst, false, targets)?;
                // `rhs` jmp is emitted by caller

                Ok(())
            }
            (Op::Or, true) => {
                // de morgan says: not(lhs or rhs) == not(lhs) and not(rhs)
                // semantics:
                //   if not(lhs) do
                //     if not(rhs) do body() end
                //   end
                emit_if_cond_inner(m, node.lhs(), node.lhs_span(), dst, true, targets)?;
                let pos = f!(m).code.len();
                m.emit(asm::jmp(PLACEHOLDER), node.lhs_span());
                targets.next.add_target(pos);

                emit_if_cond_inner(m, node.rhs(), node.rhs_span(), dst, true, targets)?;
                // `rhs` jmp is emitted by caller

                Ok(())
            }

            _ => unreachable!(),
        },

        // TODO(opt): handle lhs/rhs constant:
        // if `lhs` is constant, move it to `rhs`
        // if `rhs` is constant, try to emit specialized literal variants of eq
        // (?) const-eval if both are constant
        ast::ExprKind::Infix(node) if node.op().is_comparison() => {
            let lhs = eval_expr_reuse(m, node.lhs(), node.lhs_span(), dst)?;
            let rhs = eval_expr(m, node.rhs(), node.rhs_span())?;

            let lhs = value_to_reg_reuse(m, lhs, dst)?;
            let rhs = value_to_reg(m, rhs)?;

            let insn = match (*node.op(), negated) {
                (Op::Eq, false) | (Op::Ne, true) => asm::iseq(lhs, rhs),
                (Op::Ne, false) | (Op::Eq, true) => asm::isne(lhs, rhs),
                (Op::Gt, false) | (Op::Le, true) => asm::isgt(lhs, rhs),
                (Op::Ge, false) | (Op::Lt, true) => asm::isge(lhs, rhs),
                (Op::Lt, false) | (Op::Ge, true) => asm::islt(lhs, rhs),
                (Op::Le, false) | (Op::Gt, true) => asm::isle(lhs, rhs),
                _ => unreachable!(),
            };
            m.emit(insn, span);

            free_reg(m, rhs);
            if lhs != dst {
                free_reg(m, lhs);
            }

            Ok(())
        }

        ast::ExprKind::Prefix(node) if *node.op() == ast::PrefixOp::Not => {
            emit_if_cond_inner(m, node.rhs(), node.rhs_span(), dst, true, targets)
        }

        _ => emit_if_cond_generic(m, node, span, dst, negated, targets),
    }
}

fn emit_if_cond_generic<'a>(
    m: &mut State<'a>,
    node: Node<'a, ast::Expr>,
    span: Span,
    dst: Reg,
    negated: bool,
    targets: &mut BranchTargets<'a>,
) -> Result<()> {
    // we don't know what `node` holds, so we have to emit it into `dst`
    // and then test it.
    let value = eval_expr_reuse(m, node, span, dst)?;
    let value = value_to_reg_reuse(m, value, dst)?;

    // values will be coerced to `bool` by `isfalse`/`istrue`.
    let insn = if negated {
        // we want to skip the `jmp` if the value is _falsey_.
        asm::isfalse(value)
    } else {
        // we want to skip the `jmp` if the value is _truthy_.
        asm::istrue(value)
    };

    m.emit(insn, span);

    // `jmp` is emitted by caller.

    Ok(())
}

fn eval_expr_block<'a>(
    m: &mut State<'a>,
    block: Node<'a, ast::Block>,
    span: Span,
    dst: Option<Reg>,
) -> Result<Value<'a>> {
    m.begin_scope();
    let dst = eval_block(m, block.body(), dst)?;
    m.end_scope();
    Ok(dst)
}

fn eval_expr_get_var<'a>(
    m: &mut State<'a>,
    get: Node<'a, ast::GetVar>,
    span: Span,
    dst: Option<Reg>,
) -> Result<Value<'a>> {
    // variable must exist at this point
    match m
        .resolve(get.name().get())
        .ok_or_else(|| error("could not resolve name", get.name_span()))?
    {
        Symbol::Local { reg, .. } => Ok(Value::dynamic(*reg, get.name_span())),
        Symbol::Function { id, .. } => {
            todo!("function to variable")
        }
    }
}

fn eval_expr_set_var<'a>(
    m: &mut State<'a>,
    set: Node<'a, ast::SetVar>,
    span: Span,
    dst: Option<Reg>,
) -> Result<Value<'a>> {
    let _ = dst;

    // variable must exist at this point
    let dst = match m
        .resolve(set.base().name().get())
        .ok_or_else(|| error("could not resolve name", set.base().name_span()))?
    {
        // when adding other symbols, remember to error out here,
        // only local variables may be assigned to
        Symbol::Local { reg, .. } => *reg,
        Symbol::Function { .. } => return error("cannot assign to function", span).into(),
    };

    // lhs is always a register, so we only evaluate rhs, and emit either `vv` or `vn`.
    let (vv, vn): (fn(Reg, Reg, Reg) -> Insn, fn(Reg, Reg, Lit8) -> Insn) = match *set.op() {
        ast::AssignOp::None => {
            let value = eval_expr_reuse(m, set.value(), set.value_span(), dst)?;
            value_force_reg(m, value, dst)?;
            return Ok(Value::nil(span));
        }
        ast::AssignOp::Add => (asm::addvv, asm::addvn),
        ast::AssignOp::Sub => (asm::subvv, asm::subvn),
        ast::AssignOp::Mul => (asm::mulvv, asm::mulvn),
        ast::AssignOp::Div => (asm::divvv, asm::divvn),
    };

    let value = eval_expr(m, set.value(), set.value_span())?;
    let value = value_to_operand(m, value)?;
    let insn = match value {
        Operand::Reg(rhs) => vv(dst, dst, rhs),
        Operand::Const(rhs) => vn(dst, dst, rhs),
    };
    m.emit(insn, span);

    free_operand(m, value);

    Ok(Value::nil(span))
}

fn eval_expr_get_field<'a>(
    m: &mut State<'a>,
    node: Node<'a, ast::GetField>,
    span: Span,
    dst: Option<Reg>,
) -> Result<Value<'a>> {
    let out = maybe_reuse_reg(m, span, dst)?;

    let parent = eval_expr_reuse(m, node.parent(), node.parent_span(), out)?;
    let parent = value_to_reg_reuse(m, parent, out)?;

    let idx = str_to_operand(m, node.key().get(), node.key_span(), None)?;
    let insn = match idx {
        Operand::Reg(idx) => asm::lkey(out, parent, idx),
        Operand::Const(idx) => asm::lkeyc(out, parent, idx),
    };
    m.emit(insn, span);

    free_operand(m, idx);
    free_reg(m, parent);

    Ok(Value::dynamic(out, span))
}

fn eval_expr_set_field<'a>(
    m: &mut State<'a>,
    node: Node<'a, ast::SetField>,
    span: Span,
    dst: Option<Reg>,
) -> Result<Value<'a>> {
    // TODO: support `op`
    if *node.op() != ast::AssignOp::None {
        todo!()
    }

    let out = maybe_reuse_reg(m, span, dst)?;

    let parent = eval_expr_reuse(m, node.base().parent(), node.base().parent_span(), out)?;
    let parent = value_to_reg_reuse(m, parent, out)?;

    let idx = str_to_operand(m, node.base().key().get(), node.base().key_span(), None)?;

    let value = eval_expr(m, node.value(), node.value_span())?;
    let value = value_to_reg(m, value)?;

    let insn = match idx {
        Operand::Reg(idx) => asm::skey(parent, idx, value),
        Operand::Const(idx) => asm::skeyc(parent, idx, value),
    };
    m.emit(insn, span);

    free_reg(m, value);
    free_operand(m, idx);
    free_reg(m, parent);

    Ok(Value::dynamic(out, span))
}

fn eval_expr_get_index<'a>(
    m: &mut State<'a>,
    node: Node<'a, ast::GetIndex>,
    span: Span,
    dst: Option<Reg>,
) -> Result<Value<'a>> {
    let out = maybe_reuse_reg(m, span, dst)?;

    let parent = eval_expr_reuse(m, node.parent(), node.parent_span(), out)?;
    let parent = value_to_reg_reuse(m, parent, out)?;

    let idx = eval_idx(m, node.key(), node.key_span())?;
    let insn = match idx {
        Idx::Str(idx) => asm::lkeyc(out, parent, idx),
        Idx::Int(idx) => asm::lidxn(out, parent, idx),
        Idx::Reg(idx) => asm::lidx(out, parent, idx),
    };
    m.emit(insn, span);

    free_idx(m, idx);
    free_reg(m, parent);

    Ok(Value::dynamic(out, span))
}

fn eval_expr_set_index<'a>(
    m: &mut State<'a>,
    node: Node<'a, ast::SetIndex>,
    span: Span,
    dst: Option<Reg>,
) -> Result<Value<'a>> {
    // TODO: support `op`
    if *node.op() != ast::AssignOp::None {
        todo!()
    }

    // expr in statement position, result is always unused
    let _ = dst;

    let parent = eval_expr(m, node.base().parent(), node.base().parent_span())?;
    let parent = value_to_reg(m, parent)?;

    let idx = eval_idx(m, node.base().key(), node.base().key_span())?;

    let value = eval_expr(m, node.value(), node.value_span())?;
    let value = value_to_reg(m, value)?;

    let insn = match idx {
        Idx::Str(idx) => asm::skeyc(parent, idx, value),
        Idx::Int(idx) => asm::sidxn(parent, idx, value),
        Idx::Reg(idx) => asm::sidx(parent, idx, value),
    };
    m.emit(insn, span);

    free_reg(m, value);
    free_idx(m, idx);
    free_reg(m, parent);

    Ok(Value::nil(span))
}

enum Idx {
    Str(Lit8),
    Int(Lit8),
    Reg(Reg),
}

fn free_idx(m: &mut State<'_>, idx: Idx) {
    match idx {
        Idx::Str(_) => {}
        Idx::Int(_) => {}
        Idx::Reg(reg) => free_reg(m, reg),
    }
}

fn eval_idx<'a>(m: &mut State<'a>, idx: Node<'a, ast::Expr>, span: Span) -> Result<Idx> {
    let idx = eval_expr(m, idx, span)?;
    let idx = match idx.kind {
        ValueKind::Int(idx) => {
            let idx = int_to_operand(m, idx, span, None)?;

            match idx {
                Operand::Const(idx) => Idx::Int(idx),
                Operand::Reg(idx) => Idx::Reg(idx),
            }
        }
        ValueKind::Str(idx) => {
            let idx = str_to_operand(m, idx, span, None)?;
            match idx {
                Operand::Const(idx) => Idx::Str(idx),
                Operand::Reg(idx) => Idx::Reg(idx),
            }
        }
        _ => {
            let idx = value_to_reg(m, idx)?;
            Idx::Reg(idx)
        }
    };
    Ok(idx)
}

// TODO: specialize "method" calls (get prop -> call in a single instruction)
fn eval_expr_call<'a>(
    m: &mut State<'a>,
    call: Node<'a, ast::Call>,
    span: Span,
    dst: Option<Reg>,
) -> Result<Value<'a>> {
    // `out+1` is start of args, `out` and args must be contiguous
    // maximum number of args is 100, so they always fit within `u8`
    let nargs = call.args().len() as u8;
    let (out, args) = match dst {
        // We can use `dst` directly:
        // - If `dst` is top of stack, meaning argument registers can be
        //   allocated contiguously after `dst`
        // - If the call has no arguments, so we don't need to allocate
        //   any argument registers.
        Some(dst) if is_at_top(m, dst) || nargs == 0 => {
            // Yes; allocate registers for args right above `dst`, if there are any.
            let args = fresh_reg_range(m, span, nargs)?;
            (dst, args)
        }
        Some(..) | None => {
            // No; allocate our own `dst` and args contiguously
            let out = fresh_reg(m, span)?;
            let args = fresh_reg_range(m, span, nargs)?;
            (out, args)
        }
    };

    if let ast::ExprKind::GetVar(node) = call.callee().kind()
        && let Some(Symbol::Function { id, arity, .. }) = m.resolve(node.name().get())
    {
        // Fastcall optimization: If the symbol is syntactically a function, then
        // - check arity now, and
        // - call the function by ID, avoiding arity/type checking

        let id = *id;
        let arity = *arity;
        let nargs = call.args().len() as u8;
        if nargs != arity {
            return error(
                format!("invalid number of arguments, expected {arity} but got {nargs}"),
                span,
            )
            .into();
        }

        for ((reg, value), &span) in args.into_iter().zip(call.args()).zip(call.args_spans()) {
            let value = eval_expr_reuse(m, value, span, reg)?;
            value_force_reg(m, value, reg)?;
        }

        m.emit(asm::fastcall(out, id), span);
    } else {
        // maybe callable? only VM can know for sure

        let nargs = call.args().len() as u8;
        let callee = eval_expr_reuse(m, call.callee(), call.callee_span(), out)?;
        value_force_reg(m, callee, out)?;

        for ((reg, value), &span) in args.into_iter().zip(call.args()).zip(call.args_spans()) {
            let value = eval_expr_reuse(m, value, span, reg)?;
            value_force_reg(m, value, reg)?;
        }

        m.emit(asm::call(out, unsafe { Imm8::new_unchecked(nargs) }), span);
    }

    free_reg_range(m, args);

    Ok(Value::dynamic(out, span))
}

trait ExprInfo {
    fn needs_contiguous_registers(&self) -> bool;
}

impl ExprInfo for Node<'_, ast::Expr> {
    fn needs_contiguous_registers(&self) -> bool {
        match self.kind() {
            ast::ExprKind::Call(node) => !node.args().is_empty(),

            ast::ExprKind::Return(..)
            | ast::ExprKind::Break(..)
            | ast::ExprKind::Continue(..)
            | ast::ExprKind::IfSimple(..)
            | ast::ExprKind::IfMulti(..)
            | ast::ExprKind::Block(..)
            | ast::ExprKind::FuncAnon(..)
            | ast::ExprKind::GetVar(..)
            | ast::ExprKind::SetVar(..)
            | ast::ExprKind::GetField(..)
            | ast::ExprKind::SetField(..)
            | ast::ExprKind::GetIndex(..)
            | ast::ExprKind::SetIndex(..)
            | ast::ExprKind::Infix(..)
            | ast::ExprKind::Prefix(..)
            | ast::ExprKind::List(..)
            | ast::ExprKind::Table(..)
            | ast::ExprKind::Int32(..)
            | ast::ExprKind::Int64(..)
            | ast::ExprKind::Float32(..)
            | ast::ExprKind::Float64(..)
            | ast::ExprKind::Bool(..)
            | ast::ExprKind::Str(..)
            | ast::ExprKind::Nil(..) => false,
        }
    }
}

fn eval_expr_infix<'a>(
    m: &mut State<'a>,
    node: Node<'a, ast::Infix>,
    span: Span,
    dst: Option<Reg>,
) -> Result<Value<'a>> {
    if node.op().is_logical() {
        return eval_expr_infix_logical(m, node, span, dst);
    }

    if node.op().is_comparison() {
        return eval_expr_infix_comparison(m, node, span, dst);
    }

    let dst = maybe_reuse_reg(m, span, dst)?;

    let lhs = eval_expr_reuse(m, node.lhs(), node.lhs_span(), dst)?;
    let rhs = eval_expr(m, node.rhs(), node.rhs_span())?;

    let result = if lhs.is_const() && rhs.is_const() {
        const_eval_expr_infix(*node.op(), lhs, rhs, span)?
    } else {
        let lhs = value_to_operand_reuse(m, lhs, dst)?;
        let rhs = value_to_operand(m, rhs)?;

        let instruction = match *node.op() {
            ast::InfixOp::Add => match (lhs, rhs) {
                (Operand::Reg(lhs), Operand::Reg(rhs)) => asm::addvv(dst, lhs, rhs),
                (Operand::Reg(lhs), Operand::Const(rhs)) => asm::addvn(dst, lhs, rhs),
                (Operand::Const(lhs), Operand::Reg(rhs)) => asm::addnv(dst, lhs, rhs),
                _ => unreachable!("ICE: const/const in non-const path"),
            },
            ast::InfixOp::Sub => match (lhs, rhs) {
                (Operand::Reg(lhs), Operand::Reg(rhs)) => asm::subvv(dst, lhs, rhs),
                (Operand::Reg(lhs), Operand::Const(rhs)) => asm::subvn(dst, lhs, rhs),
                (Operand::Const(lhs), Operand::Reg(rhs)) => asm::subnv(dst, lhs, rhs),
                _ => unreachable!("ICE: const/const in non-const path"),
            },
            ast::InfixOp::Mul => match (lhs, rhs) {
                (Operand::Reg(lhs), Operand::Reg(rhs)) => asm::mulvv(dst, lhs, rhs),
                (Operand::Reg(lhs), Operand::Const(rhs)) => asm::mulvn(dst, lhs, rhs),
                (Operand::Const(lhs), Operand::Reg(rhs)) => asm::mulnv(dst, lhs, rhs),
                _ => unreachable!("ICE: const/const in non-const path"),
            },
            ast::InfixOp::Div => match (lhs, rhs) {
                (Operand::Reg(lhs), Operand::Reg(rhs)) => asm::divvv(dst, lhs, rhs),
                (Operand::Reg(lhs), Operand::Const(rhs)) => asm::divvn(dst, lhs, rhs),
                (Operand::Const(lhs), Operand::Reg(rhs)) => asm::divnv(dst, lhs, rhs),
                _ => unreachable!("ICE: const/const in non-const path"),
            },
            op => unreachable!("ICE: invalid op in emit_infix: {op:?}"),
        };

        m.emit(instruction, span);

        free_operand(m, rhs);
        if lhs != dst {
            free_operand(m, lhs);
        }

        Value::dynamic(dst, span)
    };

    Ok(result)
}

fn const_eval_expr_infix<'a>(
    op: ast::InfixOp,
    lhs: Value<'a>,
    rhs: Value<'a>,
    span: Span,
) -> Result<Value<'a>> {
    // both sides are constants, return a constant.
    use ast::InfixOp as Op;
    let (iop, fop, desc): (
        fn(i64, i64) -> Result<i64, &'static str>,
        fn(f64n, f64n) -> f64n,
        &'static str,
    ) = match op {
        Op::Add => (|a, b| Ok(a + b), |a, b| a + b, "add"),
        Op::Sub => (|a, b| Ok(a - b), |a, b| a - b, "subtract"),
        Op::Mul => (|a, b| Ok(a * b), |a, b| a * b, "multiply"),
        Op::Div => (
            |a: i64, b: i64| {
                if b == 0 {
                    Err("evaluation would fail: cannot divide by zero")
                } else {
                    Ok(a / b)
                }
            },
            |a, b| a / b,
            "divide",
        ),
        op => unreachable!("ICE: invalid op in emit_infix: {op:?}"),
    };

    use ValueKind as V;
    let v = match (lhs.kind, rhs.kind) {
        (V::Int(lhs), V::Int(rhs)) => {
            Value::int(iop(lhs, rhs).map_err(|err| error(err, span))?, span)
        }
        (V::Float(lhs), V::Float(rhs)) => Value::float(fop(lhs, rhs), span),
        (V::Float(lhs), V::Int(rhs)) => Value::float(fop(lhs, f64n::new(rhs as f64)), span),
        (V::Int(lhs), V::Float(rhs)) => Value::float(fop(f64n::new(lhs as f64), rhs), span),
        _ => {
            return error(
                format!(
                    "evaluation would fail with a type mismatch: cannot {desc} {} and {}",
                    lhs.type_name(),
                    rhs.type_name()
                ),
                span,
            )
            .into();
        }
    };
    Ok(v)
}
fn eval_expr_infix_logical<'a>(
    m: &mut State<'a>,
    node: Node<'a, ast::Infix>,
    span: Span,
    dst: Option<Reg>,
) -> Result<Value<'a>> {
    todo!()
}

fn eval_expr_infix_comparison<'a>(
    m: &mut State<'a>,
    node: Node<'a, ast::Infix>,
    span: Span,
    dst: Option<Reg>,
) -> Result<Value<'a>> {
    todo!()
}

fn eval_expr_prefix<'a>(
    m: &mut State<'a>,
    node: Node<'a, ast::Prefix>,
    span: Span,
    dst: Option<Reg>,
) -> Result<Value<'a>> {
    todo!()
}

fn eval_expr_list<'a>(
    m: &mut State<'a>,
    node: Node<'a, ast::List>,
    span: Span,
    dst: Option<Reg>,
) -> Result<Value<'a>> {
    // TODO: constant array

    let dst = maybe_reuse_reg(m, span, dst)?;

    let cap = node.items().len().min(u16::MAX as usize) as u16;
    let cap = unsafe { Imm16::new_unchecked(cap) };
    m.emit(asm::llist(dst, cap), span);

    for (idx, (item, &span)) in node
        .items()
        .into_iter()
        .zip(node.items_spans().iter())
        .enumerate()
    {
        let value = eval_expr(m, item, span)?;
        let value = value_to_reg(m, value)?;

        let idx = value_to_operand(m, Value::int(idx as i64, span))?;
        match idx {
            Operand::Reg(idx) => m.emit(asm::sidx(dst, idx, value), span),
            Operand::Const(idx) => m.emit(asm::sidxn(dst, idx, value), span),
        }

        free_operand(m, idx);
        free_reg(m, value);
    }

    Ok(Value::dynamic(dst, span))
}

fn eval_expr_table<'a>(
    m: &mut State<'a>,
    node: Node<'a, ast::Table>,
    span: Span,
    dst: Option<Reg>,
) -> Result<Value<'a>> {
    // TODO: constant object

    let dst = maybe_reuse_reg(m, span, dst)?;

    let cap = node.entries().len().min(u16::MAX as usize) as u16;
    let cap = unsafe { Imm16::new_unchecked(cap) };
    m.emit(asm::ltable(dst, cap), span);

    for (entry, &span) in node.entries().into_iter().zip(node.entries_spans().iter()) {
        let key = entry.key().get();

        let value = eval_expr(m, entry.value(), entry.value_span())?;
        let value = value_to_reg(m, value)?;

        let key = value_to_operand(m, Value::str(key, entry.key_span()))?;
        match key {
            Operand::Reg(key) => m.emit(asm::skey(dst, key, value), span),
            Operand::Const(key) => m.emit(asm::skeyc(dst, key, value), span),
        }

        free_operand(m, key);
        free_reg(m, value);
    }

    Ok(Value::dynamic(dst, span))
}

enum IntExpr<'a> {
    I32(Node<'a, ast::Int32>),
    I64(Node<'a, ast::Int64>),
}

impl<'a> IntExpr<'a> {
    fn value(&self) -> i64 {
        match self {
            IntExpr::I32(node) => (*node.value()) as i64,
            IntExpr::I64(node) => *node.get(),
        }
    }
}

fn eval_expr_int<'a>(m: &mut State<'a>, int: IntExpr<'a>, span: Span) -> Value<'a> {
    Value::int(int.value(), span)
}

enum FloatExpr<'a> {
    F32(Node<'a, ast::Float32>),
    F64(Node<'a, ast::Float64>),
}

impl<'a> FloatExpr<'a> {
    fn value(&self) -> f64n {
        match self {
            FloatExpr::F32(node) => f64n::new(*node.value() as f64),
            FloatExpr::F64(node) => *node.get(),
        }
    }
}

fn eval_expr_float<'a>(m: &mut State<'a>, float: FloatExpr<'a>, span: Span) -> Value<'a> {
    Value::float(float.value(), span)
}

fn eval_expr_bool<'a>(m: &mut State, bool: Node<'a, ast::Bool>, span: Span) -> Value<'a> {
    Value::bool(*bool.value(), span)
}

fn eval_expr_str<'a>(m: &mut State<'a>, str: Node<'a, ast::Str>, span: Span) -> Value<'a> {
    Value::str(str.get(), span)
}

fn eval_expr_nil<'a>(m: &mut State<'a>, nil: Node<'a, ast::Nil>, span: Span) -> Value<'a> {
    Value::nil(span)
}

#[derive(Debug, Clone, Copy)]
enum Operand {
    /// The value exists in this register.
    Reg(Reg),

    /// The value exists only in the literal pool.
    Const(Lit8),
}

impl PartialEq<Reg> for Operand {
    fn eq(&self, other: &Reg) -> bool {
        match self {
            Self::Reg(this) => this != other,
            Self::Const(_) => false,
        }
    }
}

impl PartialEq<Reg> for Reg {
    fn eq(&self, other: &Reg) -> bool {
        self.get() == other.get()
    }
}

impl Eq for Reg {}

fn nil_to_operand<'a>(m: &mut State<'a>, span: Span, dst: Option<Reg>) -> Result<Operand> {
    // `nil` is never stored in the literal pool, because it is a singleton,
    // so always emit into a register.
    nil_to_reg(m, span, dst).map(Operand::Reg)
}

fn nil_to_reg<'a>(m: &mut State<'a>, span: Span, dst: Option<Reg>) -> Result<Reg> {
    let dst = maybe_reuse_reg(m, span, dst)?;
    m.emit(asm::lnil(dst), span);
    Ok(dst)
}

fn bool_to_operand<'a>(
    m: &mut State<'a>,
    value: bool,
    span: Span,
    dst: Option<Reg>,
) -> Result<Operand> {
    bool_to_reg(m, value, span, dst).map(Operand::Reg)
}

fn bool_to_reg<'a>(m: &mut State<'a>, value: bool, span: Span, dst: Option<Reg>) -> Result<Reg> {
    let dst = maybe_reuse_reg(m, span, dst)?;
    match value {
        true => m.emit(asm::ltrue(dst), span),
        false => m.emit(asm::lfalse(dst), span),
    }
    Ok(dst)
}

fn int_to_operand<'a>(
    m: &mut State<'a>,
    value: i64,
    span: Span,
    dst: Option<Reg>,
) -> Result<Operand> {
    if f!(m).literals.is_next_id_8bit() {
        // emit it as a literal, use it as operand
        let id = f!(m).literals.i64(value, span)?;
        Ok(Operand::Const(unsafe {
            Lit8::new_unchecked(id.get() as u8)
        }))
    } else {
        int_to_reg(m, value, span, dst).map(Operand::Reg)
    }
}

fn int_to_reg<'a>(m: &mut State<'a>, value: i64, span: Span, dst: Option<Reg>) -> Result<Reg> {
    let dst = maybe_reuse_reg(m, span, dst)?;
    // emit it as a load, use the register
    if value <= i16::MAX as i64 {
        let v = unsafe { Imm16s::new_unchecked(value as i16) };
        m.emit(asm::lsmi(dst, v), span);
    } else {
        let id = f!(m).literals.i64(value, span)?;
        m.emit(asm::lint(dst, id), span);
    }
    Ok(dst)
}

fn float_to_operand<'a>(
    m: &mut State<'a>,
    value: f64n,
    span: Span,
    dst: Option<Reg>,
) -> Result<Operand> {
    if f!(m).literals.is_next_id_8bit() {
        // emit it as a literal, use it as operand
        let id = f!(m).literals.f64(value, span)?;
        Ok(Operand::Const(unsafe {
            Lit8::new_unchecked(id.get() as u8)
        }))
    } else {
        float_to_reg(m, value, span, dst).map(Operand::Reg)
    }
}

fn float_to_reg<'a>(m: &mut State<'a>, value: f64n, span: Span, dst: Option<Reg>) -> Result<Reg> {
    let dst = maybe_reuse_reg(m, span, dst)?;
    let id = f!(m).literals.f64(value, span)?;
    m.emit(asm::lnum(dst, id), span);
    Ok(dst)
}

fn str_to_operand<'a>(
    m: &mut State<'a>,
    value: &'a str,
    span: Span,
    dst: Option<Reg>,
) -> Result<Operand> {
    if f!(m).literals.is_next_id_8bit() {
        let id = f!(m).literals.str(value, span)?;
        Ok(Operand::Const(unsafe {
            Lit8::new_unchecked(id.get() as u8)
        }))
    } else {
        str_to_reg(m, value, span, dst).map(Operand::Reg)
    }
}

fn str_to_reg<'a>(m: &mut State<'a>, value: &'a str, span: Span, dst: Option<Reg>) -> Result<Reg> {
    let dst = maybe_reuse_reg(m, span, dst)?;
    let id = f!(m).literals.str(value, span)?;
    m.emit(asm::lstr(dst, id), span);
    Ok(dst)
}

fn value_to_operand_maybe_reuse<'a>(
    m: &mut State<'a>,
    value: Value<'a>,
    dst: Option<Reg>,
) -> Result<Operand> {
    match value.kind {
        // already materialized
        ValueKind::Dynamic(reg) => Ok(Operand::Reg(reg)),

        ValueKind::Nil => nil_to_operand(m, value.span, dst),
        ValueKind::Bool(inner) => bool_to_operand(m, inner, value.span, dst),
        ValueKind::Int(inner) => int_to_operand(m, inner, value.span, dst),
        ValueKind::Float(inner) => float_to_operand(m, inner, value.span, dst),
        ValueKind::Str(inner) => str_to_operand(m, inner, value.span, dst),
    }
}

/// Materialize `value` into a register or literal for use in emit.
fn value_to_operand<'a>(m: &mut State<'a>, value: Value<'a>) -> Result<Operand> {
    value_to_operand_maybe_reuse(m, value, None)
}

/// Materialize `value` into a register or literal for use in emit, emitting into `dst` if possible.
fn value_to_operand_reuse<'a>(m: &mut State<'a>, value: Value<'a>, dst: Reg) -> Result<Operand> {
    value_to_operand_maybe_reuse(m, value, Some(dst))
}

fn value_to_reg_maybe_reuse<'a>(
    m: &mut State<'a>,
    value: Value<'a>,
    dst: Option<Reg>,
) -> Result<Reg> {
    match value.kind {
        // already materialized
        ValueKind::Dynamic(reg) => Ok(reg),

        ValueKind::Nil => nil_to_reg(m, value.span, dst),
        ValueKind::Bool(inner) => bool_to_reg(m, inner, value.span, dst),
        ValueKind::Int(inner) => int_to_reg(m, inner, value.span, dst),
        ValueKind::Float(inner) => float_to_reg(m, inner, value.span, dst),
        ValueKind::Str(inner) => str_to_reg(m, inner, value.span, dst),
    }
}

/// Materialize `value` into a register for use in emit.
fn value_to_reg<'a>(m: &mut State<'a>, value: Value<'a>) -> Result<Reg> {
    value_to_reg_maybe_reuse(m, value, None)
}

/// Materialize `value` into a register for use in emit, emitting into `dst` if possible.
fn value_to_reg_reuse<'a>(m: &mut State<'a>, value: Value<'a>, dst: Reg) -> Result<Reg> {
    value_to_reg_maybe_reuse(m, value, Some(dst))
}

/// Materialize `value` into `dst`.
///
/// This function guarantees the value will be present in `dst` instead of
/// some other register.
fn value_force_reg<'a>(m: &mut State<'a>, value: Value<'a>, dst: Reg) -> Result<()> {
    let src = value_to_reg_reuse(m, value, dst)?;
    if src != dst {
        m.emit(asm::mov(dst, src), value.span);
    }
    Ok(())
}

#[cfg(test)]
mod tests;
