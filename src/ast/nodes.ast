
stmt var {
    name: ident,
    value: expr,
};

stmt loop {
    body: [stmt],
};

stmt func_decl {
    name: ident,
    body: block,
    params: [ident],
};

stmt stmt_expr {
    inner: expr,
};

expr return {
    value: expr?,
};

expr break;
expr continue;

expr if_simple {
    cond: expr,
    body: [stmt],
    tail: block?,
};

expr if_multi {
    branches: [branch],
    tail: block?,
};

data branch {
    cond: expr,
    body: [stmt],
};

expr block {
    body: [stmt],
};

expr func_anon {
    name: ident?,
    body: block,
    params: [ident],
};

expr get_var {
    name: ident,
};

expr set_var(op: AssignOp as u24) {
    base: get_var,
    value: expr,
};

expr get_field {
    parent: expr,
    key: ident,
};

expr set_field(op: AssignOp as u24) {
    base: get_field,
    value: expr,
};

expr get_index {
    parent: expr,
    key: expr,
};

expr set_index(op: AssignOp as u24) {
    base: get_index,
    value: expr,
};

expr call {
    callee: expr,
    args: [expr],
};

expr infix(op: InfixOp as u24) {
    lhs: expr,
    rhs: expr,
};

expr prefix(op: PrefixOp as u24) {
    rhs: expr,
};

expr list {
    items: [expr],
};

expr table {
    entries: [table_entry],
};

data table_entry {
    key: str,
    value: expr,
};

expr int32(value: i32 as u32);
expr int64(id: IntId as u32);

expr float32(value: f32 as u32);
expr float64(id: FloatId as u32);

expr bool(value: bool as u32);

expr str(id: StrId as u32);

expr nil;

data ident(id: IdentId as u32);

